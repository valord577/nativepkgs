name: _matrix
on:
  workflow_call:
    inputs:
      disable_shared:
        default: true
        required: false
        type: boolean
      disable_static:
        default: false
        required: false
        type: boolean
      disable_upload:
        default: false
        required: false
        type: boolean

env:
  GH_TOKEN: ${{ github.token }}
  GIT_WORK_TREE: ${{ github.workspace }}
  GH_OSSUTIL_AK: ${{ secrets.GH_OSSUTIL_AK }}
  GH_OSSUTIL_SK: ${{ secrets.GH_OSSUTIL_SK }}
  GH_OSSUTIL_BUCKET: ${{ secrets.GH_OSSUTIL_BUCKET }}
  GH_OSSUTIL_REGION: ${{ secrets.GH_OSSUTIL_REGION }}
  GH_OSSUTIL_PKGS: ${{ secrets.GH_OSSUTIL_PKGS }}
  GH_OSSUTIL_CNAME: ${{ secrets.GH_OSSUTIL_CNAME }}

jobs:
  _preset:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      pkgver: ${{ steps.set-pkgver.outputs.pkgver }}
    steps:
      - name: clone with gh
        run: |
          gh repo clone ${{ github.repositoryUrl }} .git -- --bare --depth=1
          git fetch --no-tags --prune --no-recurse-submodules --depth=1 origin +${{ github.sha }}
          git checkout FETCH_HEAD
      - name: set matrix
        id: set-matrix
        run: |
          matrix=$(cat .github/matrix.json | jq -c -M)
          printf "\e[1m\e[33m%s\e[0m\n" "matrix: $matrix"
          echo -n "matrix={\"include\":$(echo $matrix)}" >> "$GITHUB_OUTPUT"
      - name: set pkgver
        id: set-pkgver
        run: |
          pkgver=$(git ls-tree -d -z --abbrev=7 --format='%(objectname)' HEAD -- deps/${{ github.workflow }})
          printf "\e[1m\e[33m%s\e[0m\n" "pkgver: $pkgver"
          echo -n "pkgver=$pkgver" >> "$GITHUB_OUTPUT"

  _buildx:
    needs: _preset
    strategy:
      matrix: ${{ fromJson(needs._preset.outputs.matrix) }}
    runs-on: ${{ matrix.on }}
    env:
      _REPO_THIS: "_repo_this"
      _SETP_CAN_RUN: ${{ (! inputs.disable_shared && matrix.pkg_type == 'shared') || (! inputs.disable_static && matrix.pkg_type == 'static') }}
      INST_DIR: "${{ github.workspace }}/${{ github.workflow }}"
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_GHA_KEY: ${{ matrix.pkg_type }}-${{ matrix.platform }}-${{ matrix.arch }}-${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}
      CCACHE_GHA_KEY_RESTORE: ${{ matrix.pkg_type }}-${{ matrix.platform }}-${{ matrix.arch }}
    steps:
      - name: checkout this repo
        uses: actions/checkout@v4
        with:
          path: ${{ env._REPO_THIS }}
      - name: install required software(s)
        run: |
          brew list -l
          brew install ccache nasm
      - name: gh action ccache restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.CCACHE_GHA_KEY }}
          restore-keys: |
            ${{ env.CCACHE_GHA_KEY_RESTORE }}
      - name: buildx library - ${{ github.workflow }}
        if: ${{ env._SETP_CAN_RUN == 'true' }}
        run: |
          source ${{ env._REPO_THIS }}/build_${{ matrix.platform }}_${{ matrix.arch }}.sh
          compile ${{ github.workflow }} ${{ matrix.pkg_type }} ${{ matrix.platform }} ${{ matrix.arch }}
      - name: gh action ccache save
        if: ${{ env._SETP_CAN_RUN == 'true' }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.CCACHE_GHA_KEY }}
      - name: set required env `_PKG_ZIP_NAME`
        if: ${{ env._SETP_CAN_RUN == 'true' }}
        run: |
          echo "_PKG_ZIP_NAME=${{ github.workflow }}_${{ matrix.platform }}_${{ matrix.arch }}_${{ needs._preset.outputs.pkgver }}_${{ matrix.pkg_type }}" >> "$GITHUB_ENV"
      - name: compress library - ${{ github.workflow }}
        if: ${{ env._SETP_CAN_RUN == 'true' }}
        run: |
          zip -ry "${{ env._PKG_ZIP_NAME }}.zip" ${{ github.workflow }}
      - name: upload library - ${{ github.workflow }}
        if: ${{ env._SETP_CAN_RUN == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env._PKG_ZIP_NAME }}
          path: ${{ env._PKG_ZIP_NAME }}.zip

  _upload:
    needs:
      - _preset
      - _buildx
    runs-on: ubuntu-latest
    env:
      _PUSH_CAN_EXE: ${{ github.event_name == 'push' && (! inputs.disable_upload) }}
    steps:
      - name: download ${{ github.workflow }} libraries
        uses: actions/download-artifact@v4
        with:
          path: ${{ github.workspace }}/${{ github.workflow }}
      - name: show debug info
        run: |
          env
          echo -e "\n"
          echo -e "${PWD}"
          echo -e "\n"
          ls -Alh -- .
          echo -e "\n"
          ls -AlhR ${{ github.workflow }}
      - name: commit to pre-compiled packages
        if: ${{ env._PUSH_CAN_EXE == 'true' }}
        run: |
          mkdir -p '${{ github.workflow }}/${{ needs._preset.outputs.pkgver }}'
          mv -f ${{ github.workspace }}/${{ github.workflow }}/*/*.zip '${{ github.workflow }}/${{ needs._preset.outputs.pkgver }}'

          for ZIP in `ls -- ${{ github.workflow }}/${{ needs._preset.outputs.pkgver }}`; do
            ./.github/oss_v4.py push "${{ github.workflow }}/${{ needs._preset.outputs.pkgver }}/${ZIP}" \
              "${{ github.workflow }}/${{ needs._preset.outputs.pkgver }}/${ZIP}"
          done
