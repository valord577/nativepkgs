name: _matrix
on:
  workflow_call:
    inputs:
      disable_shared:
        default: true
        required: false
        type: boolean
      disable_static:
        default: false
        required: false
        type: boolean
      disable_commit:
        default: false
        required: false
        type: boolean
      disable_ccache:
        default: true
        required: false
        type: boolean
      allow_failure:
        default: true
        required: false
        type: boolean

      container_linux:
        default: "linux310-gcc7-cross"
        required: false
        type: string
      container_linux_vers:
        default: "5e1cd74dd7892b7e89f135155b7bdaf6bfa49841"
        required: false
        type: string
      container_mingw:
        default: "mingw-cross-native"
        required: false
        type: string
      container_mingw_vers:
        default: "5e1cd74dd7892b7e89f135155b7bdaf6bfa49841"
        required: false
        type: string
      container_android:
        default: "android-ndk-r27d"
        required: false
        type: string
      container_android_vers:
        default: "0568b971815a51a4b5371fdb17411b61276d5a3f"
        required: false
        type: string

      skip_platform_apple:
        default: false
        required: false
        type: boolean
      skip_platform_win32:
        default: false
        required: false
        type: boolean
      skip_platform_linux:
        default: false
        required: false
        type: boolean
      skip_platform_android:
        default: false
        required: false
        type: boolean
      select_platforms:
        default: ""
        required: false
        type: string


env:
  GH_TOKEN: ${{ github.token }}
  PKG_NAME: ${{ github.workflow }}
  CI_HIT_MESSAGE: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} (${{ github.sha }})"
  S3_R2_ACCOUNT_ID: ${{ secrets.S3_R2_ACCOUNT_ID }}
  S3_R2_ACCESS_KEY: ${{ secrets.S3_R2_ACCESS_KEY }}
  S3_R2_SECRET_KEY: ${{ secrets.S3_R2_SECRET_KEY }}
  S3_R2_STORAGE_BUCKET: ${{ secrets.S3_R2_STORAGE_BUCKET }}
  S3_R2_STORAGE_REGION: ${{ secrets.S3_R2_STORAGE_REGION }}

jobs:
  _preset:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      matrix-container: ${{ steps.set-matrix-container.outputs.matrix-container }}
    steps:
      - name: clone source
        run: |
          git config --global --add safe.directory "*"

          git init
          git remote add x ${{github.server_url}}/${{ github.repository }}.git
          git fetch --no-tags --prune --no-recurse-submodules --depth=1 x +${{ github.sha }}
          git checkout FETCH_HEAD
      - name: jq filters
        run: |
          _platforms_="${{ inputs.select_platforms }}"; _platforms_triplet_=(${_platforms_//,/ })
          for _platform_ in ${_platforms_triplet_[@]}; do
            if [ -z "${jq_expr_plat}" ];
              then { jq_expr_plat="(.platform==\"${_platform_}\")"; }
              else { jq_expr_plat="$jq_expr_plat or (.platform==\"${_platform_}\")"; }
            fi
          done
          printf "\e[1m\e[33m%s\e[0m\n" "jq_expr_plat: $jq_expr_plat"; echo "jq_expr_plat=$jq_expr_plat" >> "$GITHUB_ENV"
      - name: set matrix
        id: set-matrix
        run: |
          _is_apple_='.platform == "iphoneos" or .platform == "iphonesimulator" or .platform == "macosx"'
          _is_win32_='.platform == "win-msvc"'

          matrix=$(cat .github/matrix.json | jq -c -M)
          matrix=$(echo ${matrix} | jq -c -M "map(if ${_is_apple_} then . + {os: \"macos-15\"} else . end)")
          matrix=$(echo ${matrix} | jq -c -M "map(if ${_is_win32_} then . + {os: \"windows-2022\"} else . end)")

          [ -n "${jq_expr_plat}" ] && \
            { matrix=$(echo ${matrix} | jq -c -M "map(. | select($jq_expr_plat) )"); }

          ${{ inputs.skip_platform_apple }} && \
            { matrix=$(echo ${matrix} | jq -c -M "map(if ${_is_apple_} then empty else . end)"); }
          ${{ inputs.skip_platform_win32 }} && \
            { matrix=$(echo ${matrix} | jq -c -M "map(if ${_is_win32_} then empty else . end)"); }


          matrix_shared='[]'; matrix_static='[]'
          ${{ (! inputs.disable_shared) }} && \
            { matrix_shared=$(echo ${matrix} | jq -c -M 'map(. + {"pkg_type": "shared"})'); }
          ${{ (! inputs.disable_static) }} && \
            { matrix_static=$(echo ${matrix} | jq -c -M 'map(. + {"pkg_type": "static"})'); }
          matrix=$(echo ${matrix_shared} | jq -c -M --argjson matrix_static "${matrix_static}" '. + $matrix_static')

          printf "\e[1m\e[33m%s\e[0m\n" "matrix: $matrix"
          echo "matrix={\"include\":$(echo $matrix)}" >> "$GITHUB_OUTPUT"
      - name: set matrix container
        id: set-matrix-container
        run: |
          container_linux="valord577/${{ inputs.container_linux }}:${{ inputs.container_linux_vers }}"
          container_mingw="valord577/${{ inputs.container_mingw }}:${{ inputs.container_mingw_vers }}"
          container_android="valord577/${{ inputs.container_android }}:${{ inputs.container_android_vers }}"

          matrix=$(cat .github/matrix_container.json | jq -c -M)
          matrix=$(echo ${matrix} | jq -c -M "map(if .platform == \"linux\"     then . + {image: \"${container_linux}\"}   else . end)")
          matrix=$(echo ${matrix} | jq -c -M "map(if .platform == \"win-mingw\" then . + {image: \"${container_mingw}\"}   else . end)")
          matrix=$(echo ${matrix} | jq -c -M "map(if .platform == \"android\"   then . + {image: \"${container_android}\"} else . end)")

          [ -n "${jq_expr_plat}" ] && \
            { matrix=$(echo ${matrix} | jq -c -M "map(. | select($jq_expr_plat) )"); }

          ${{ inputs.skip_platform_linux }} && \
            { matrix=$(echo ${matrix} | jq -c -M 'map(if .platform == "linux"     then empty else . end)'); }
          ${{ inputs.skip_platform_win32 }} && \
            { matrix=$(echo ${matrix} | jq -c -M 'map(if .platform == "win-mingw" then empty else . end)'); }
          ${{ inputs.skip_platform_android }} && \
            { matrix=$(echo ${matrix} | jq -c -M 'map(if .platform == "android"   then empty else . end)'); }


          matrix_shared='[]'; matrix_static='[]'
          ${{ (! inputs.disable_shared) }} && \
            { matrix_shared=$(echo ${matrix} | jq -c -M 'map(. + {"pkg_type": "shared"})'); }
          ${{ (! inputs.disable_static) }} && \
            { matrix_static=$(echo ${matrix} | jq -c -M 'map(. + {"pkg_type": "static"})'); }
          matrix=$(echo ${matrix_shared} | jq -c -M --argjson matrix_static "${matrix_static}" '. + $matrix_static')

          printf "\e[1m\e[33m%s\e[0m\n" "matrix: $matrix"
          echo "matrix-container={\"include\":$(echo $matrix)}" >> "$GITHUB_OUTPUT"

  _buildx_on_host:
    needs: _preset
    strategy:
      matrix: ${{ fromJson(needs._preset.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ inputs.allow_failure }}
    defaults:
      run:
        shell: ${{ startsWith(matrix.os, 'windows') && 'pwsh' || 'bash' }}
        working-directory: ${{ github.workspace }}
    steps:
      - name: set required software(s) - macos
        if: ${{ startsWith(matrix.os, 'macos') }}
        run: |
          sudo mdutil -a -i off

          brew install ccache nasm; brew list -l
      - name: set required software(s) - windows
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: |
          Set-MpPreference `
            -DisableBehaviorMonitoring $True `
            -DisableIOAVProtection     $True `
            -DisableArchiveScanning    $True `
            -DisableScriptScanning     $True `
            -DisableRealtimeMonitoring $True
          Set-ExecutionPolicy -ExecutionPolicy Bypass -Force -Scope CurrentUser

          choco install ccache nasm; choco list

          C:/msys64/usr/bin/bash.exe -lc `
            'pacman --noconfirm -S zip;'
      - name: clone source
        run: |
          git config --global --add safe.directory "*"

          git init
          git remote add x ${{github.server_url}}/${{ github.repository }}.git
          git fetch --no-tags --prune --no-recurse-submodules --depth=1 x +${{ github.sha }}
          git checkout FETCH_HEAD
      - name: setup rclone for s3 (cloudflare r2)
        run: |
          python3 ./.github/rclone.py
      - name: set required env - 00
        run: |
          python3 ./.github/setenv_00.py '${{ env.PKG_NAME }}' '${{ matrix.platform }}' '${{ matrix.arch }}' '${{ matrix.libc }}' '${{ matrix.pkg_type }}'
      - name: ccache get... (s3)
        if: ${{ (! inputs.disable_ccache) }}
        run: |
          python3 ./.github/ccache_get.py '${{ env.CCACHE_DIR }}' '${{ env.CCACHE_KEY }}'
      - name: library buildx - ${{ env.PKG_NAME }}
        run: |
          python3 -m venv .env
          ${{
            startsWith(matrix.os, 'windows')
              && '.env/Scripts/activate.ps1'
              || 'source .env/bin/activate'
          }}
          python3 ./build.py ${{ matrix.platform }} ${{ matrix.arch }} -m ${{ env.PKG_NAME }}
      - name: ccache put... (s3)
        if: ${{ (! inputs.disable_ccache) }}
        run: |
          python3 ./.github/ccache_put.py '${{ env.CCACHE_DIR }}' '${{ env.CCACHE_KEY }}'
      - name: set required env - 01
        run: |
          python3 ./.github/setenv_01.py '${{ env.PKG_NAME }}' '${{ matrix.platform }}' '${{ matrix.pkg_type }}'
      - name: library packed - ${{ env.PKG_NAME }}
        run: |
          # keep file permissions and case sensitivity
          python3 ./.github/library_packed.py
      - name: library upload - ${{ env.PKG_NAME }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PKG_ZIPNAME }}
          path: ${{ env.PKG_ZIPNAME }}.zip
          compression-level: 0
      - name: commit to pre-compiled storage
        if: ${{ github.event_name == 'push' && (! inputs.disable_commit) }}
        run: |
          ./.github/rclone copy "${{ env.PKG_ZIPNAME }}.zip" "r2:${{ env.S3_R2_STORAGE_BUCKET }}/packages/${{ env.PKG_NAME }}/${{ env.PKG_VERSION }}/"

  _buildx_on_container:
    needs: _preset
    strategy:
      matrix: ${{ fromJson(needs._preset.outputs.matrix-container) }}
    runs-on: ubuntu-latest
    continue-on-error: ${{ inputs.allow_failure }}
    container:
      image: ${{ matrix.image }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}
    steps:
      - name: clone source
        run: |
          git config --global --add safe.directory "*"

          git init
          git remote add x ${{github.server_url}}/${{ github.repository }}.git
          git fetch --no-tags --prune --no-recurse-submodules --depth=1 x +${{ github.sha }}
          git checkout FETCH_HEAD
      - name: setup rclone for s3 (cloudflare r2)
        run: |
          ./.github/rclone.py
      - name: set required env - 00
        run: |
          ./.github/setenv_00.py '${{ env.PKG_NAME }}' '${{ matrix.platform }}' '${{ matrix.arch }}' '${{ matrix.libc }}' '${{ matrix.pkg_type }}'
      - name: ccache get... (s3)
        if: ${{ (! inputs.disable_ccache) }}
        run: |
          ./.github/ccache_get.py '${{ env.CCACHE_DIR }}' '${{ env.CCACHE_KEY }}'
      - name: library buildx - ${{ env.PKG_NAME }}
        run: |
          build_target_args='${{ matrix.platform }} ${{ matrix.arch }}'
          ${{ matrix.platform == 'linux' }} && \
            {
              build_target_args='${{ matrix.platform }} crossbuild ${{ matrix.arch }} ${{ matrix.libc }}'
            }
          ${{ matrix.platform == 'android' }} && ${{ matrix.libc != '' }} \
            {
              export ANDROID_FLEXIBLE_PAGE_SIZES=${{ matrix.libc }}
            }

          python3 -m venv .env; source .env/bin/activate
          ./build.py ${build_target_args} -m ${{ env.PKG_NAME }}
      - name: ccache put... (s3)
        if: ${{ (! inputs.disable_ccache) }}
        run: |
          ./.github/ccache_put.py '${{ env.CCACHE_DIR }}' '${{ env.CCACHE_KEY }}'
      - name: set required env - 01
        run: |
          ./.github/setenv_01.py '${{ env.PKG_NAME }}' '${{ matrix.platform }}' '${{ matrix.pkg_type }}'
      - name: library packed - ${{ env.PKG_NAME }}
        run: |
          # keep file permissions and case sensitivity
          ./.github/library_packed.py
      - name: library upload - ${{ env.PKG_NAME }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PKG_ZIPNAME }}
          path: ${{ env.PKG_ZIPNAME }}.zip
          compression-level: 0
      - name: commit to pre-compiled storage
        if: ${{ github.event_name == 'push' && (! inputs.disable_commit) }}
        run: |
          ./.github/rclone copy "${{ env.PKG_ZIPNAME }}.zip" "r2:${{ env.S3_R2_STORAGE_BUCKET }}/packages/${{ env.PKG_NAME }}/${{ env.PKG_VERSION }}/"
