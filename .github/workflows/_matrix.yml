name: _matrix
on:
  workflow_call:
    inputs:
      disable_shared:
        default: true
        required: false
        type: boolean
      disable_static:
        default: false
        required: false
        type: boolean
      disable_commit:
        default: false
        required: false
        type: boolean
      allow_failure:
        default: true
        required: false
        type: boolean

      container_linux:
        default: "linux310-gcc4"
        required: false
        type: string
      container_linux_vers:
        default: "07dcb8281c82686f54791e993f5f894360dfa5c9"
        required: false
        type: string
      container_mingw:
        default: "mingw-cross-native"
        required: false
        type: string
      container_mingw_vers:
        default: "919e10ce6cc9b46ddf10e7fbd9030e6ed4fa8095"
        required: false
        type: string

      skip_platform_apple:
        default: false
        required: false
        type: boolean
      skip_platform_win32:
        default: false
        required: false
        type: boolean
      skip_platform_linux:
        default: false
        required: false
        type: boolean
      select_platforms:
        default: ""
        required: false
        type: string


env:
  GH_TOKEN: ${{ github.token }}
  GH_OSSUTIL_AK: ${{ secrets.GH_OSSUTIL_AK }}
  GH_OSSUTIL_SK: ${{ secrets.GH_OSSUTIL_SK }}
  GH_OSSUTIL_BUCKET: ${{ secrets.GH_OSSUTIL_BUCKET }}
  GH_OSSUTIL_REGION: ${{ secrets.GH_OSSUTIL_REGION }}
  GH_OSSUTIL_PKGS: ${{ secrets.GH_OSSUTIL_PKGS }}
  GH_OSSUTIL_CNAME: ${{ secrets.GH_OSSUTIL_CNAME }}
  PKG_NAME: ${{ github.workflow }}
  INST_DIR: ${{ github.workspace }}/${{ github.workflow }}
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  CI_HIT_MESSAGE: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} (${{ github.sha }})"
  NATIVEPKGS_RUNTIME_VERBOSE: '1'
  PYTHONUNBUFFERED: '1'
  PYTHONDONTWRITEBYTECODE: '1'
  S3_R2_ACCOUNT_ID: ${{ secrets.S3_R2_ACCOUNT_ID }}
  S3_R2_ACCESS_KEY: ${{ secrets.S3_R2_ACCESS_KEY }}
  S3_R2_SECRET_KEY: ${{ secrets.S3_R2_SECRET_KEY }}
  S3_R2_STORAGE_BUCKET: ${{ secrets.S3_R2_STORAGE_BUCKET }}
  S3_R2_STORAGE_REGION: ${{ secrets.S3_R2_STORAGE_REGION }}

jobs:
  _preset:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}
    outputs:
      pkgver: ${{ steps.set-pkgver.outputs.pkgver }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      matrix-container: ${{ steps.set-matrix-container.outputs.matrix-container }}
    steps:
      - name: clone source
        run: |
          git config --global --add safe.directory "*"

          git init
          git remote add x ${{github.server_url}}/${{ github.repository }}.git
          git fetch --no-tags --prune --no-recurse-submodules --depth=1 x +${{ github.sha }}
          git checkout FETCH_HEAD
      - name: set pkgver
        id: set-pkgver
        run: |
          pkgver=$(git ls-tree -d --abbrev=7 --format='%(objectname)' HEAD -- deps/${{ env.PKG_NAME }})
          printf "\e[1m\e[33m%s\e[0m\n" "pkgver: $pkgver"
          echo "pkgver=$pkgver" >> "$GITHUB_OUTPUT"
      - name: jq filters
        run: |
          _platforms_="${{ inputs.select_platforms }}"; _platforms_triplet_=(${_platforms_//,/ })
          for _platform_ in ${_platforms_triplet_[@]}; do
            if [ -z "${jq_expr_plat}" ];
              then { jq_expr_plat="(.platform==\"${_platform_}\")"; }
              else { jq_expr_plat="$jq_expr_plat or (.platform==\"${_platform_}\")"; }
            fi
          done
          printf "\e[1m\e[33m%s\e[0m\n" "jq_expr_plat: $jq_expr_plat"; echo "jq_expr_plat=$jq_expr_plat" >> "$GITHUB_ENV"
      - name: set matrix
        id: set-matrix
        run: |
          _is_apple_='.platform == "iphoneos" or .platform == "iphonesimulator" or .platform == "macosx"'
          _is_win32_='.platform == "win-msvc"'

          matrix=$(cat .github/matrix.json | jq -c -M)
          matrix=$(echo ${matrix} | jq -c -M "map(if ${_is_apple_} then . + {os: \"macos-15\"} else . end)")
          matrix=$(echo ${matrix} | jq -c -M "map(if ${_is_win32_} then . + {os: \"windows-2025\"} else . end)")

          [ -n "${jq_expr_plat}" ] && \
            { matrix=$(echo ${matrix} | jq -c -M "map(. | select($jq_expr_plat) )"); }

          ${{ inputs.skip_platform_apple }} && \
            { matrix=$(echo ${matrix} | jq -c -M "map(if ${_is_apple_} then empty else . end)"); }
          ${{ inputs.skip_platform_win32 }} && \
            { matrix=$(echo ${matrix} | jq -c -M "map(if ${_is_win32_} then empty else . end)"); }


          matrix_shared='[]'; matrix_static='[]'
          ${{ (! inputs.disable_shared) }} && \
            { matrix_shared=$(echo ${matrix} | jq -c -M 'map(. + {"pkg_type": "shared"})'); }
          ${{ (! inputs.disable_static) }} && \
            { matrix_static=$(echo ${matrix} | jq -c -M 'map(. + {"pkg_type": "static"})'); }
          matrix=$(echo ${matrix_shared} | jq -c -M --argjson matrix_static "${matrix_static}" '. + $matrix_static')

          printf "\e[1m\e[33m%s\e[0m\n" "matrix: $matrix"
          echo "matrix={\"include\":$(echo $matrix)}" >> "$GITHUB_OUTPUT"
      - name: set matrix container
        id: set-matrix-container
        run: |
          container_linux="valord577/${{ inputs.container_linux }}-cross:${{ inputs.container_linux_vers }}"
          container_mingw="valord577/${{ inputs.container_mingw }}:${{ inputs.container_mingw_vers }}"

          matrix=$(cat .github/matrix_container.json | jq -c -M)
          matrix=$(echo ${matrix} | jq -c -M "map(if .platform == \"linux\"     then . + {image: \"${container_linux}\"} else . end)")
          matrix=$(echo ${matrix} | jq -c -M "map(if .platform == \"win-mingw\" then . + {image: \"${container_mingw}\"} else . end)")

          [ -n "${jq_expr_plat}" ] && \
            { matrix=$(echo ${matrix} | jq -c -M "map(. | select($jq_expr_plat) )"); }

          ${{ inputs.skip_platform_linux }} && \
            { matrix=$(echo ${matrix} | jq -c -M 'map(if .platform == "linux"     then empty else . end)'); }
          ${{ inputs.skip_platform_win32 }} && \
            { matrix=$(echo ${matrix} | jq -c -M 'map(if .platform == "win-mingw" then empty else . end)'); }


          matrix_shared='[]'; matrix_static='[]'
          ${{ (! inputs.disable_shared) }} && \
            { matrix_shared=$(echo ${matrix} | jq -c -M 'map(. + {"pkg_type": "shared"})'); }
          ${{ (! inputs.disable_static) }} && \
            { matrix_static=$(echo ${matrix} | jq -c -M 'map(. + {"pkg_type": "static"})'); }
          matrix=$(echo ${matrix_shared} | jq -c -M --argjson matrix_static "${matrix_static}" '. + $matrix_static')

          printf "\e[1m\e[33m%s\e[0m\n" "matrix: $matrix"
          echo "matrix-container={\"include\":$(echo $matrix)}" >> "$GITHUB_OUTPUT"

  _buildx_on_host:
    needs: _preset
    strategy:
      matrix: ${{ fromJson(needs._preset.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ inputs.allow_failure }}
    defaults:
      run:
        shell: ${{ startsWith(matrix.os, 'windows') && 'pwsh' || 'bash' }}
        working-directory: ${{ github.workspace }}
    steps:
      - name: set required env - macos
        if: ${{ startsWith(matrix.os, 'macos') }}
        run: |
          sudo mdutil -a -i off


          CCACHE_GHA_KEY="${{ env.PKG_NAME }}-${{ matrix.pkg_type }}-${{ matrix.platform }}-${{ matrix.arch }}"
          PKG_ZIP_NAME="${{ env.PKG_NAME }}_${{ matrix.platform }}_${{ matrix.arch }}_${{ needs._preset.outputs.pkgver }}_${{ matrix.pkg_type }}"

          echo "CCACHE_GHA_KEY=${CCACHE_GHA_KEY}" >> "$GITHUB_ENV"
          echo "PKG_ZIP_NAME=${PKG_ZIP_NAME}" >> "$GITHUB_ENV"
      - name: set required env - windows
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: |
          Set-MpPreference -DisableRealtimeMonitoring $true


          $CCACHE_GHA_KEY="${{ env.PKG_NAME }}-${{ matrix.pkg_type }}-${{ matrix.platform }}-${{ matrix.arch }}"
          $PKG_ZIP_NAME="${{ env.PKG_NAME }}_${{ matrix.platform }}_${{ matrix.arch }}_${{ needs._preset.outputs.pkgver }}_${{ matrix.pkg_type }}"

          echo "CCACHE_GHA_KEY=${CCACHE_GHA_KEY}" >> "$env:GITHUB_ENV"
          echo "PKG_ZIP_NAME=${PKG_ZIP_NAME}" >> "$env:GITHUB_ENV"
      - name: clone source
        run: |
          git config --global --add safe.directory "*"

          git init
          git remote add x ${{github.server_url}}/${{ github.repository }}.git
          git fetch --no-tags --prune --no-recurse-submodules --depth=1 x +${{ github.sha }}
          git checkout FETCH_HEAD
      - name: install required software(s) - macos
        if: ${{ startsWith(matrix.os, 'macos') }}
        run: |
          brew install ccache nasm tree; brew list -l
      - name: install required software(s) - windows
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: |
          choco install ccache nasm; choco list
      - name: gh action ccache restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.CCACHE_GHA_KEY }}
      - name: buildx library - ${{ env.PKG_NAME }} - macos
        if: ${{ startsWith(matrix.os, 'macos') }}
        run: |
          ./build_${{ matrix.platform }}_${{ matrix.arch }}.sh ${{ env.PKG_NAME }} ${{ matrix.pkg_type }}

          # keep file permissions and case sensitivity
          zip -ry "${{ env.PKG_ZIP_NAME }}.zip" ${{ env.PKG_NAME }}
      - name: buildx library - ${{ env.PKG_NAME }} - windows
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: |
          & ".\build_${{ matrix.platform }}_${{ matrix.arch }}.ps1" ${{ env.PKG_NAME }} ${{ matrix.pkg_type }}
          if (($LASTEXITCODE -ne $null) -and ($LASTEXITCODE -ne 0)) { exit $LASTEXITCODE }

          # keep file permissions and case sensitivity
          C:/msys64/usr/bin/bash.exe -lc 'pacman --noconfirm -S zip;'
          C:/msys64/usr/bin/bash.exe -lc `
            'cd $(cygpath -u "${{ github.workspace }}"); zip -ry "${{ env.PKG_ZIP_NAME }}.zip" ${{ env.PKG_NAME }}'
      - name: gh action ccache save
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.CCACHE_GHA_KEY }}
      - name: upload library - ${{ env.PKG_NAME }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PKG_ZIP_NAME }}
          path: ${{ env.PKG_ZIP_NAME }}.zip
          compression-level: 0
      - name: commit to pre-compiled storage
        if: ${{ github.event_name == 'push' && (! inputs.disable_commit) }}
        run: |
          python3 ./.github/oss_v4.py push "${{ env.PKG_ZIP_NAME }}.zip" "${{ env.PKG_NAME }}/${{ needs._preset.outputs.pkgver }}/${{ env.PKG_ZIP_NAME }}.zip"

  _buildx_on_container:
    needs: _preset
    strategy:
      matrix: ${{ fromJson(needs._preset.outputs.matrix-container) }}
    runs-on: ubuntu-latest
    continue-on-error: ${{ inputs.allow_failure }}
    container:
      image: ${{ matrix.image }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}
    steps:
      - name: set required env
        run: |
          target_arch_libc='${{ matrix.arch }}'
          ${{ matrix.platform == 'linux' }} && \
            { target_arch_libc='${{ matrix.arch }}-${{ matrix.lib_impl }}'; }

          CCACHE_GHA_KEY="${{ env.PKG_NAME }}-${{ matrix.pkg_type }}-${{ matrix.platform }}-${target_arch_libc}"
          PKG_ZIP_NAME="${{ env.PKG_NAME }}_${{ matrix.platform }}_${target_arch_libc}_${{ needs._preset.outputs.pkgver }}_${{ matrix.pkg_type }}"

          echo "CCACHE_GHA_KEY=${CCACHE_GHA_KEY}" >> "$GITHUB_ENV"
          echo "PKG_ZIP_NAME=${PKG_ZIP_NAME}" >> "$GITHUB_ENV"
      - name: clone source
        run: |
          git config --global --add safe.directory "*"

          git init
          git remote add x ${{github.server_url}}/${{ github.repository }}.git
          git fetch --no-tags --prune --no-recurse-submodules --depth=1 x +${{ github.sha }}
          git checkout FETCH_HEAD
      - name: gh action ccache restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.CCACHE_GHA_KEY }}
      - name: buildx library - ${{ env.PKG_NAME }}
        run: |
          build_target_args='${{ matrix.platform }} ${{ matrix.arch }}'
          ${{ matrix.platform == 'linux' }} && \
            { build_target_args='${{ matrix.platform }} crossbuild ${{ matrix.arch }} ${{ matrix.lib_impl }}'; }

          python3 -m venv .env
          export PKG_TYPE=${{ matrix.pkg_type }}
          source .env/bin/activate
          ./build.py ${build_target_args} -m ${{ env.PKG_NAME }}

          # keep file permissions and case sensitivity
          zip -ry "${{ env.PKG_ZIP_NAME }}.zip" ${{ env.PKG_NAME }}
      - name: gh action ccache save
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.CCACHE_GHA_KEY }}
      - name: upload library - ${{ env.PKG_NAME }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PKG_ZIP_NAME }}
          path: ${{ env.PKG_ZIP_NAME }}.zip
          compression-level: 0
      - name: commit to pre-compiled storage
        if: ${{ github.event_name == 'push' && (! inputs.disable_commit) }}
        run: |
          ./.github/oss_v4.py push "${{ env.PKG_ZIP_NAME }}.zip" "${{ env.PKG_NAME }}/${{ needs._preset.outputs.pkgver }}/${{ env.PKG_ZIP_NAME }}.zip"
